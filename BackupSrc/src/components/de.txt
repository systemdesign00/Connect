import React, { useState, useEffect } from 'react'
import { createAPIEndpoint, ENDPIONTS } from "../../api";
import Paper from '@mui/material/Paper';
import TextField from '@mui/material/TextField';
import { List, ListItemText, ListItem, ListItemSecondaryAction, } from '@mui/material';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import { makeStyles } from '@mui/styles';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import Button from '@mui/material/Button';
import TablePagination from '@mui/material/TablePagination';
import TableRow from '@mui/material/TableRow';
import { useTheme } from '@mui/material/styles';
import InputAdornment from '@mui/material/InputAdornment';
import IconButton from '@mui/material/IconButton';
import FirstPageIcon from '@mui/icons-material/FirstPage';
import PaidOutlinedIcon  from '@mui/icons-material/PaidOutlined';
import CategoryOutlinedIcon from '@mui/icons-material/CategoryOutlined';
import BalanceOutlinedIcon from '@mui/icons-material/BalanceOutlined';
import AddShoppingCartOutlinedIcon from '@mui/icons-material/AddShoppingCartOutlined';
import QueryStatsOutlinedIcon from '@mui/icons-material/QueryStatsOutlined';
import KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';
import KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';
import LastPageIcon from '@mui/icons-material/LastPage';
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import PropTypes from 'prop-types';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import { red, green ,blue} from '@mui/material/colors';
import EditLocationOutlinedIcon from '@mui/icons-material/EditLocationOutlined';
import DeleteSweepOutlinedIcon from '@mui/icons-material/DeleteSweepOutlined';
import SaveAsOutlinedIcon from '@mui/icons-material/SaveAsOutlined';
import OldCal from './OldCal';
import SearchFoodItems from './SearchFoodItems';
import Popup from '../../layouts/Popup';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import Badge from '@mui/material/Badge';
import Tooltip from '@mui/material/Tooltip';
import Notification from "../../layouts/Notification";
const redTheme = createTheme({ palette: { primary: red } })
const greenTheme = createTheme({ palette: { primary: green } })
const blueTheme = createTheme({ palette: { primary: blue } })
const blackTheme = createTheme({ palette: { primary: blue } })
const useStyles = makeStyles(theme => ({
    root: {
        minWidth: 0,
        margin: useTheme().spacing(0.2)
    },
    table: {
        '& thead th': {
            fontWeight: '600',
            color: useTheme().palette.primary.main,
            backgroundColor: useTheme().palette.primary.light,
        },
        '& tbody td': {
            fontWeight: '300',
        },
        '& tbody tr:hover': {
            //backgroundColor: '#fffbf2',
            cursor: 'pointer',
        },
        '& .MuiTableCell-root': {
            border: 'none'
        }
    },

    paperRoot: {
        margin: '15px 0px',
        '&:hover': {
            cursor: 'pointer'
        },
        '&:hover $deleteButton': {
            display: 'block'
        }
    },
    buttonGroup: {
        backgroundColor: '#E3E3E3',
        borderRadius: 8,
        '& .MuiButtonBase-root ': {
            border: 'none',
            minWidth: '20px',
            padding: '1px'
        },
        '& button:nth-child(2)': {
            fontSize: '1.2em',
            color: '#000'
        }
    },

    deleteButton: {
        display: 'none',
        '& .MuiButtonBase-root': {
            color: '#E81719'
        },
    },
    totalPerItem: {
        fontWeight: 'bolder',
        fontSize: '1.2em',
        margin: '0px 10px'
    }
}))



export default function OrderedFoodItems(props,initialFValues) {
    const classes = useStyles();

  
  
const { values, setValues } = props;
  
    let orderedFoodItems = values.orderDetails;
    let orderedFoodItemss = values.orderDetails;
    const removeFoodItem = (index, id) => {
        //debugger;
        let x = { ...values };
        x.orderDetails = x.orderDetails.filter((_, i) => i !== index);
        if (id !== 0)
            x.deletedOrderItemIds += id + ',';
        setValues({ ...x });
    }

    
    
      const update = (idx) => {
        let x ={...values};
      
        let foodItem = x.orderDetails[idx];
        foodItem.foodItemName = data.foodItemName
           foodItem.foodItemPrice = data.foodItemPrice
              foodItem.quantity = data.quantity
              foodItem.tax = data.tax
              foodItem.discount = data.discount
        setValues({...x});
        setIsEditing(false)
        //resetInputField()
      }

    

  
const [oldListVisibility, setOldListVisibility] = useState(false);
const openListOfOld = () => {
        setOldListVisibility(true);
    }

const [orderListVisibility, setOrderListVisibility] = useState(false);
const openListOfOrders = () => {
        setOrderListVisibility(true);
    }
       const { recordForEdit } = props;
    //let orderedFoodItems = values.orderDetails;

    const [foodItems, setFoodItems] = useState([]);
    //const [searchList, setSearchList] = useState([]);
    //const [searchKey, setSearchKey] = useState('');

  
    useEffect(() => {

        createAPIEndpoint(ENDPIONTS.FOODITEM).fetchAll()
            .then(res => {
                setFoodItems(res.data);
                //setSearchList(res.data);
            })
            .catch(err=>console.log(err))


    }, [])


useEffect(() => {
        if (recordForEdit != null)
            setData({
                ...recordForEdit,
                
            })
    }, [recordForEdit])
    /* useEffect(() => {
         let x = [...foodItems];
         x = x.filter(y => {
             return y.foodItemName.toLowerCase().includes(searchKey.toLocaleLowerCase())
                // && orderedFoodItems.every(item => item.foodItemId != y.foodItemId)
         });
         setSearchList(x);
     }, [searchKey, orderedFoodItems]) */ // [searchKey, orderedFoodItems]
    //const tree= values.small
    const generateOrderNumber = () => Math.floor(100000 + Math.random() * 900000).toString();
    const addFoodItem = foodItem => {
        let x = {
            id: generateOrderNumber(), //values.id
            orderDetailId: 0,
            foodItemId: foodItem.id || generateOrderNumber(),
            quantity: foodItem.quantity || data.quantity,
            tax: foodItem.tax || data.tax,
            discount:foodItem.discount || data.discount,
            foodItemPrice: foodItem.foodItemPrice || data.foodItemPrice ,  //data.prices
            foodItemName: foodItem.foodItemName || data.foodItemName, //data.fullname 
        }
        setValues({
            ...values,
            orderDetails: [...values.orderDetails, x]
        })
    }
    const resetInputField = () => {
        setData(initialFValues);

    };
    initialFValues = {
        id: '',
        foodItemId: '',
        foodItemName: '',
        quantity:'',
        foodItemPrice: '',
        tax: '',
        discount:''
    }
    const [data, setData] = useState(initialFValues)
    function handle(e) {
        const newdata = { ...data }
        newdata[e.target.id] = e.target.value
        setData(newdata)


        //console.log(newdata)
    }
    // const [title,setTitle] = useState('');
    //const [titles,setTitles] = useState('');
    const handleChange = (e) => {
        e.preventDefault()
       
       
    }

   
      {/*useEffect(() => {
        let gTotals = values.orderDetails.reduce((tempTotal, item) => {
            return tempTotal +  item.foodItemPrice * item.quantity;
        }, 0);
        setValues({
            ...values,
            gTotals: gTotals
        })
// eslint-disable-next-line react-hooks/exhaustive-deps
    }, [JSON.stringify(values.orderDetails)]);*/}
     const [notify, setNotify] = useState({ isOpen: false })
 const [currentId, setCurrentId] = useState(0)
const [isEditing, setIsEditing] = useState(false)
  useEffect(() => {
        if (currentId != 0) {
            setData({
                ...orderedFoodItems.find(x => x.id == currentId)
            })
            
        }
    }, [currentId])
  const handleSubmit =(e,idx) => {
        e.preventDefault()
        
            if (data.id == data.id)
                update(6)
                //alert(data.id)
            else
                addFoodItem(data)
                
        
    }
    const [display, setdisplay] = useState([]);

     useEffect(() => {
        createAPIEndpoint(ENDPIONTS.PRICE).fetchAll()
            .then(res => {
              
                setdisplay(res.data)
            })
            .catch(err => console.log(err))
    }, [])
const rates =   display.map(item => (item.rate))
const cd = rates - 100
const subtotals = values.orderDetails.reduce((prev, curr) => {
   
      return prev + (curr.foodItemPrice * curr.quantity * rates) - (curr.discount * curr.foodItemPrice * curr.quantity * rates) / 100 + curr.tax * (curr.foodItemPrice * curr.quantity * rates) / 100;
    
  }, 0);
const tot = values.orderDetails.reduce((prev, curr) => {
   
      return prev + (curr.foodItemPrices - curr.quantitys) * cd;
    
  }, 0);
  var result = 0
  var results = 0
    const Total = data.foodItemPrice * data.quantity
  return (
    <Grid container spacing={2}>
    <Grid item xs={6}>
<Paper sx={{ width: '100%', overflow: 'hidden' }} elevation={3}>
         <Toolbar
    
    >
     
        <Typography
          sx={{ flex: '1 1 50%' }}
          variant="h6"
         
          
        >
       Ordered Items
        </Typography>
        <Grid
  container
  
  direction="column"
  
 
  
>

  <Grid >
    <TextField
             sx={{ m: 1, width: '25ch' }}
          placeholder="Search Item"
  variant="standard"
  size="small"
         value={rates}
          InputProps={{
            startAdornment: <InputAdornment position="start">
              
              <ThemeProvider theme={blackTheme}>
            <Button className={`${classes.root} `}  >
          <QueryStatsOutlinedIcon/> 
          </Button>
   </ThemeProvider>
             </InputAdornment>
          }}
        />
     
  </Grid>   
   
</Grid> 
      <ThemeProvider theme={redTheme}>
            <Button className={`${classes.root} `} onClick={openListOfOld} >
               <Badge color="primary" > 
      <Tooltip title="Add Item"   arrow> 
       <AddShoppingCartOutlinedIcon color="primary" fontSize="medium" />
         </Tooltip>
    </Badge>
      </Button>
   </ThemeProvider>
            <ThemeProvider theme={blueTheme}>
            <Button className={`${classes.root} `} onClick={openListOfOrders} >
               <Badge badgeContent={orderedFoodItems.length} color="primary" > 
      <Tooltip title="Add Item"   arrow> 
       <AddShoppingCartOutlinedIcon color="primary" fontSize="medium" />
         </Tooltip>
    </Badge>
      </Button>
   </ThemeProvider>
    
    </Toolbar>

  
      <TableContainer sx={{ maxHeight: 470 }}>
        <Table stickyHeader aria-label="sticky table" className={classes.table}> 
         <TableHead >
                            <TableRow>
                            
                                <TableCell>ItemName</TableCell>
                                   <TableCell>Weight</TableCell>
                                <TableCell>Wastage/per</TableCell>
                                   <TableCell>Tax</TableCell>
                                      <TableCell>Discount</TableCell>
                               <TableCell>Total</TableCell>
                                <TableCell>Actions</TableCell>
                            </TableRow>
                        </TableHead>
          <TableBody >
             {orderedFoodItems.length == 0 ?
            <>
            <List
      sx={{ width: '590%', bgcolor: 'background.paper' }}
      
    >
            <ListItem>
                <ListItemText
                  primary="No Items"

                  primaryTypographyProps={{
                    style: {
                      textAlign: 'center',
                      fontStyle: 'italic'
                    }
                  }} />
              </ListItem>
    </List>
</>
                :
            orderedFoodItems.map((item ,idx) => {
          results = values.orderDetails.reduce((total, currentValue) => total = total + currentValue.subtotal,0);           
          result = values.orderDetails.reduce((total, currentValue) => total = total + currentValue.subtotal,0) - values.discou;           
                return (
                    <TableRow key={idx} >
                       
                                        <TableCell>
                                         
                                   {
                isEditing === idx ? 
                   <form onSubmit={handleChange} className={classes.root} noValidate autoComplete="off">
         



             <TextField label="foodItemName" name="foodItemName" id="foodItemName" 
              size="small"
          variant="standard"
              InputProps={{ startAdornment:
            <InputAdornment position="start">
              <CategoryOutlinedIcon />
            </InputAdornment>
          }}
             value={data.foodItemName} onChange={(e) => handle(e)} />
                </form>
                : <h4 >{item.foodItemName}</h4>
            }
                                        </TableCell>
                                        <TableCell >
                                            <>
{
                isEditing === idx ? 
                   <form onSubmit={handleChange} className={classes.root} noValidate autoComplete="off">
         <TextField 
          size="small"
          variant="standard"
          InputProps={{
       startAdornment:
            <InputAdornment position="start">
              <PaidOutlinedIcon />
            </InputAdornment>
          }}
                inputProps={{ inputMode: 'numeric' }} label="foodItemPrice" 
                name="foodItemPrice" id="foodItemPrice" value={data.foodItemPrice} onChange={(e) => handle(e)} />
                </form>
                : <h4 > {item.foodItemPrice  }</h4>
            }
                                              
                                                  {
                                                    /*
                                                    {'$' + roundTo2DecimalPoint((item.tax / 100) * (item.quantity * item.foodItemPrice) + (item.quantity * item.foodItemPrice))}
                                                  */
                                                  }
                                                
                                                  

                                            </>
                                        </TableCell>
                                        <TableCell >
                                           {
                isEditing ===idx ? 
                   <form onSubmit={handleChange} className={classes.root} noValidate autoComplete="off">
           <TextField 
            size="small"
          variant="standard"
           InputProps={{
       startAdornment:
            <InputAdornment position="start">
              <BalanceOutlinedIcon />
            </InputAdornment>
          }}
           inputProps={{ inputMode: 'numeric' }} label="quantity" name="quantity" id="quantity" 
           value={data.quantity} onChange={(e) => handle(e)} />
                </form>
                : <h4 > {item.quantity }</h4>
            }
                                           
                                        </TableCell>
                                          <TableCell >
                                           {
                isEditing ===idx ? 
                   <form onSubmit={handleChange} className={classes.root} noValidate autoComplete="off">
           <TextField 
            size="small"
          variant="standard"
           InputProps={{
       startAdornment:
            <InputAdornment position="start">
              <BalanceOutlinedIcon />
            </InputAdornment>
          }}
           inputProps={{ inputMode: 'numeric' }} label="tax" name="tax" id="tax" 
           value={data.tax} onChange={(e) => handle(e)} />
                </form>
                : <h4 > {item.tax }</h4>
            }
                                           
                                        </TableCell>
                                                 <TableCell >
                                           {
                isEditing ===idx ? 
                   <form onSubmit={handleChange} className={classes.root} noValidate autoComplete="off">
           <TextField 
            size="small"
          variant="standard"
           InputProps={{
       startAdornment:
            <InputAdornment position="start">
              <BalanceOutlinedIcon />
            </InputAdornment>
          }}
           inputProps={{ inputMode: 'numeric' }} label="discount" name="discount" id="discount" 
           value={data.discount} onChange={(e) => handle(e)} />
                </form>
                : <h4 > { item.discount}</h4>
            }
                                           
                                        </TableCell>
                                       <TableCell>
                                <h4 > { item.subtotal }</h4>

                                         { /*
                                            isEditing ===idx ? (data.foodItemPrice * data.quantity * rates) - ((data.discount * data.foodItemPrice * data.quantity * rates) / 100) + data.tax * (data.foodItemPrice * data.quantity * rates) / 100 
                                            : <h4 > {item.tax == 'old' ?  (item.foodItemPrices - item.quantitys ) * cd : (item.foodItemPrice * item.quantity * rates) - (item.discount * item.foodItemPrice * item.quantity * rates) / 100 + item.tax * (item.foodItemPrice * item.quantity * rates) / 100}</h4>
                                         */ }
                                       </TableCell>

                                        <TableCell >
                                          {
                                             isEditing === idx ? 
                 
                                          <ThemeProvider theme={blueTheme}>
                                               
                                                <Button className={`${classes.root}`} style={{ backgroundColor: "#ABD1FF"}} 
                                               onClick={(e)=>update(idx)
                                             
                                            }>
                                                
                                                <SaveAsOutlinedIcon  fontSize="medium"/>
                                                </Button>
                                            </ThemeProvider>
                :
                                          <ThemeProvider theme={greenTheme}>
                                                <Button className={`${classes.root}`} style={{ backgroundColor: '#cdffcd'}} 
                                         onClick={()=>{
                                              setCurrentId(item.id) 
                                              setIsEditing(idx,true)
                                         }} >
                                                 
                                                    <EditLocationOutlinedIcon  fontSize="medium" />
                                                </Button>
                                                
                                            </ThemeProvider>
            }
                                            <ThemeProvider theme={redTheme}>
                                                <Button className={`${classes.root}`} style={{  backgroundColor: '#ffbfbf'}} 
                                                onClick={e => removeFoodItem(idx, item.orderDetailId)}
                                                > <DeleteSweepOutlinedIcon  fontSize="medium" />
                                                </Button>
                                            </ThemeProvider>
                                        </TableCell>

                                        

                                    </TableRow>
                );
              })}
              <TableRow>
            <TableCell rowSpan={6} />
       <TableCell colSpan={4}>SubTotal</TableCell>
            <TableCell >${results.toFixed(2)}</TableCell>
          </TableRow>
          <TableRow>
            <TableCell colSpan={4}>Discount</TableCell>
            <TableCell >${values.discou}</TableCell>
           
          </TableRow>
          
           
          <TableRow>
            <TableCell colSpan={4} >Total</TableCell>
            <TableCell > $
                        {result.toFixed(2) % 1 === 0
                          ? result.toFixed(2)
                          : result.toFixed(2)}</TableCell>
          </TableRow>
          </TableBody>
        </Table>
      </TableContainer>
     
              <Notification
                {...{ notify, setNotify }} />
      <Popup
                title="List of Orders"
                openPopup={orderListVisibility}
                setOpenPopup={setOrderListVisibility}>
                 
                <SearchFoodItems
                    {...{
                      setOrderListVisibility,
                        values,
                        setValues
                    }}
                />
            </Popup>
               <Popup
                title="Old"
                openPopup={oldListVisibility}
                setOpenPopup={setOldListVisibility}>
                 
                <OldCal
                    {...{
                      setOldListVisibility,
                        values,
                        setValues
                    }}
                />
            </Popup>
    </Paper>
      </Grid>
<Grid item xs={6}>
<Paper sx={{ width: '100%', overflow: 'hidden' }} elevation={3}>
         <Toolbar
    
    >
     
        <Typography
          sx={{ flex: '1 1 50%' }}
          variant="h6"
         
          
        >
       Ordered Items
        </Typography>
        <Grid
  container
  
  direction="column"
  
 
  
>

  <Grid >
    <TextField
             sx={{ m: 1, width: '25ch' }}
          placeholder="Search Item"
  variant="standard"
  size="small"
         value={rates}
          InputProps={{
            startAdornment: <InputAdornment position="start">
              
              <ThemeProvider theme={blackTheme}>
            <Button className={`${classes.root} `}  >
          <QueryStatsOutlinedIcon/> 
          </Button>
   </ThemeProvider>
             </InputAdornment>
          }}
        />
     
  </Grid>   
   
</Grid> 
      <ThemeProvider theme={redTheme}>
            <Button className={`${classes.root} `} onClick={openListOfOld} >
               <Badge color="primary" > 
      <Tooltip title="Add Item"   arrow> 
       <AddShoppingCartOutlinedIcon color="primary" fontSize="medium" />
         </Tooltip>
    </Badge>
      </Button>
   </ThemeProvider>
            <ThemeProvider theme={blueTheme}>
            <Button className={`${classes.root} `} onClick={openListOfOrders} >
               <Badge badgeContent={orderedFoodItems.length} color="primary" > 
      <Tooltip title="Add Item"   arrow> 
       <AddShoppingCartOutlinedIcon color="primary" fontSize="medium" />
         </Tooltip>
    </Badge>
      </Button>
   </ThemeProvider>
    
    </Toolbar>

  
      <TableContainer sx={{ maxHeight: 470 }}>
        <Table stickyHeader aria-label="sticky table" className={classes.table}> 
         <TableHead >
                            <TableRow>
                            
                                <TableCell>ItemName</TableCell>
                                   <TableCell>Weight</TableCell>
                                <TableCell>Wastage/per</TableCell>
                                   <TableCell>Tax</TableCell>
                                      <TableCell>Discount</TableCell>
                               <TableCell>Total</TableCell>
                                <TableCell>Actions</TableCell>
                            </TableRow>
                        </TableHead>
          <TableBody >
             {orderedFoodItems.length == 0 ?
            <>
            <List
      sx={{ width: '590%', bgcolor: 'background.paper' }}
      
    >
            <ListItem>
                <ListItemText
                  primary="No Items"

                  primaryTypographyProps={{
                    style: {
                      textAlign: 'center',
                      fontStyle: 'italic'
                    }
                  }} />
              </ListItem>
    </List>
</>
                :
            orderedFoodItemss.map((items ,idx) => {
          results = values.orderDetails.reduce((total, currentValue) => total = total + currentValue.subtotal,0);           
          result = values.orderDetails.reduce((total, currentValue) => total = total + currentValue.subtotal,0) - values.discou;           
                return (
                    <TableRow key={idx} >
                       
                                        <TableCell>
                                         
                                   {
                isEditing === idx ? 
                   <form onSubmit={handleChange} className={classes.root} noValidate autoComplete="off">
         



             <TextField label="foodItemName" name="foodItemName" id="foodItemName" 
              size="small"
          variant="standard"
              InputProps={{ startAdornment:
            <InputAdornment position="start">
              <CategoryOutlinedIcon />
            </InputAdornment>
          }}
             value={data.foodItemName} onChange={(e) => handle(e)} />
                </form>
                : <h4 >{items.foodItemNames}</h4>
            }
                                        </TableCell>
                                        <TableCell >
                                            <>
{
                isEditing === idx ? 
                   <form onSubmit={handleChange} className={classes.root} noValidate autoComplete="off">
         <TextField 
          size="small"
          variant="standard"
          InputProps={{
       startAdornment:
            <InputAdornment position="start">
              <PaidOutlinedIcon />
            </InputAdornment>
          }}
                inputProps={{ inputMode: 'numeric' }} label="foodItemPrice" 
                name="foodItemPrice" id="foodItemPrice" value={data.foodItemPrice} onChange={(e) => handle(e)} />
                </form>
                : <h4 > {items.foodItemPrices   }</h4>
            }
                                              
                                                  {
                                                    /*
                                                    {'$' + roundTo2DecimalPoint((item.tax / 100) * (item.quantity * item.foodItemPrice) + (item.quantity * item.foodItemPrice))}
                                                  */
                                                  }
                                                
                                                  

                                            </>
                                        </TableCell>
                                        <TableCell >
                                           {
                isEditing ===idx ? 
                   <form onSubmit={handleChange} className={classes.root} noValidate autoComplete="off">
           <TextField 
            size="small"
          variant="standard"
           InputProps={{
       startAdornment:
            <InputAdornment position="start">
              <BalanceOutlinedIcon />
            </InputAdornment>
          }}
           inputProps={{ inputMode: 'numeric' }} label="quantity" name="quantity" id="quantity" 
           value={data.quantity} onChange={(e) => handle(e)} />
                </form>
                : <h4 > { items.quantitys }</h4>
            }
                                           
                                        </TableCell>
                                          <TableCell >
                                           {
                isEditing ===idx ? 
                   <form onSubmit={handleChange} className={classes.root} noValidate autoComplete="off">
           <TextField 
            size="small"
          variant="standard"
           InputProps={{
       startAdornment:
            <InputAdornment position="start">
              <BalanceOutlinedIcon />
            </InputAdornment>
          }}
           inputProps={{ inputMode: 'numeric' }} label="tax" name="tax" id="tax" 
           value={data.tax} onChange={(e) => handle(e)} />
                </form>
                : <h4 > {items.taxs }</h4>
            }
                                           
                                        </TableCell>
                                                 <TableCell >
                                           {
                isEditing ===idx ? 
                   <form onSubmit={handleChange} className={classes.root} noValidate autoComplete="off">
           <TextField 
            size="small"
          variant="standard"
           InputProps={{
       startAdornment:
            <InputAdornment position="start">
              <BalanceOutlinedIcon />
            </InputAdornment>
          }}
           inputProps={{ inputMode: 'numeric' }} label="discount" name="discount" id="discount" 
           value={data.discount} onChange={(e) => handle(e)} />
                </form>
                : <h4 > {items.discounts }</h4>
            }
                                           
                                        </TableCell>
                                       <TableCell>
                                <h4 > {items.subtotals }</h4>

                                         { /*
                                            isEditing ===idx ? (data.foodItemPrice * data.quantity * rates) - ((data.discount * data.foodItemPrice * data.quantity * rates) / 100) + data.tax * (data.foodItemPrice * data.quantity * rates) / 100 
                                            : <h4 > {item.tax == 'old' ?  (item.foodItemPrices - item.quantitys ) * cd : (item.foodItemPrice * item.quantity * rates) - (item.discount * item.foodItemPrice * item.quantity * rates) / 100 + item.tax * (item.foodItemPrice * item.quantity * rates) / 100}</h4>
                                         */ }
                                       </TableCell>

                                      {
                                        items.tax == 'old' ?
                                          <TableCell >
                                          {
                                             isEditing === idx ? 
                 
                                          <ThemeProvider theme={blueTheme}>
                                               
                                                <Button className={`${classes.root}`} style={{ backgroundColor: "#ABD1FF"}} 
                                               onClick={(e)=>update(idx)
                                             
                                            }>
                                                
                                                <SaveAsOutlinedIcon  fontSize="medium"/>
                                                </Button>
                                            </ThemeProvider>
                :
                                          <ThemeProvider theme={greenTheme}>
                                                <Button className={`${classes.root}`} style={{ backgroundColor: '#cdffcd'}} 
                                         onClick={()=>{
                                              setCurrentId(items.id) 
                                              setIsEditing(idx,true)
                                         }} >
                                                 
                                                    <EditLocationOutlinedIcon  fontSize="medium" />
                                                </Button>
                                                
                                            </ThemeProvider>
            }
                                            <ThemeProvider theme={redTheme}>
                                                <Button className={`${classes.root}`} style={{  backgroundColor: '#ffbfbf'}} 
                                                onClick={e => removeFoodItem(idx, items.orderDetailId)}
                                                > <DeleteSweepOutlinedIcon  fontSize="medium" />
                                                </Button>
                                            </ThemeProvider>
                                        </TableCell>
:
''
                                      }
                                        

                                    </TableRow>
                );
              })}
              <TableRow>
            <TableCell rowSpan={6} />
       <TableCell colSpan={4}>SubTotal</TableCell>
            <TableCell >${results.toFixed(2)}</TableCell>
          </TableRow>
          <TableRow>
            <TableCell colSpan={4}>Discount</TableCell>
            <TableCell >${values.discou}</TableCell>
           
          </TableRow>
          
           
          <TableRow>
            <TableCell colSpan={4} >Total</TableCell>
            <TableCell > $
                        {result.toFixed(2) % 1 === 0
                          ? result.toFixed(2)
                          : result.toFixed(2)}</TableCell>
          </TableRow>
          </TableBody>
        </Table>
      </TableContainer>
     
              <Notification
                {...{ notify, setNotify }} />
      <Popup
                title="List of Orders"
                openPopup={orderListVisibility}
                setOpenPopup={setOrderListVisibility}>
                 
                <SearchFoodItems
                    {...{
                      setOrderListVisibility,
                        values,
                        setValues
                    }}
                />
            </Popup>
               <Popup
                title="Old"
                openPopup={oldListVisibility}
                setOpenPopup={setOldListVisibility}>
                 
                <OldCal
                    {...{
                      setOldListVisibility,
                        values,
                        setValues
                    }}
                />
            </Popup>
    </Paper>
      </Grid>
    </Grid>
    
  );
}


import React, { useState, useEffect } from 'react'
import { createAPIEndpoint, ENDPIONTS } from "../../api";
import { Grid , List, ListItem, ListItemText, Paper, InputBase, IconButton, ListItemSecondaryAction,CardActionArea} from '@mui/material';
import InputLabel from '@mui/material/InputLabel';
import MenuItem from '@mui/material/MenuItem';
import CardHeader from '@mui/material/CardHeader';
import Select from '@mui/material/Select';
import FormControl from '@mui/material/FormControl';
import ShoppingCartOutlinedIcon from '@mui/icons-material/ShoppingCartOutlined';
import SearchTwoToneIcon from '@mui/icons-material/SearchTwoTone';
import PlusOneIcon from '@mui/icons-material/PlusOne';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import MoreVertIcon from '@mui/icons-material/MoreVert';
import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';
import Card from '@mui/material/Card';
import { red } from '@mui/material/colors';
import CardActions from '@mui/material/CardActions';
import CardContent from '@mui/material/CardContent';
import {
 Avatar,
  ListSubheader,
Box,

Typography,
  InputAdornment} from '@mui/material'
import SearchIcon from "@mui/icons-material/Search";
//import IconButton from '@mui/material/IconButton';
//import List from '@mui/material/List';
//import ListItem from '@mui/material/ListItem';
//import ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';
//import ListItemText from '@mui/material/ListItemText';
//import PlusOneIcon from '@mui/icons-material/PlusOne';
//import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';
//import CustomizedInputBase from '../../api/Search';
import { AdapterDateFns } from '@mui/lab/AdapterDateFns';
import { LocalizationProvider } from '@mui/lab';
//import { DatePicker } from '@mui/lab';
import axios from "axios";
import { makeStyles } from '@mui/styles';
import Button from '@mui/material/Button';
import TextField from '@mui/material/TextField';
import { useTheme } from '@mui/material/styles';


const useStyles = makeStyles(theme => ({
    root: {
        '& .MuiFormControl-root': {
            width: '90%',
            margin: useTheme().spacing(1)
        }
    },
    searchPaper: {
        padding: '2px 4px',
        display: 'flex',
        alignItems: 'center',
    },
    searchInput: {
        marginLeft: useTheme().spacing(1.5),
        flex: 1,
    },
    listRoot: {
        marginTop: useTheme().spacing(1),
        maxHeight: 450,
        overflow: 'auto',
        '& li:hover': {
            cursor: 'pointer',
            backgroundColor: '#E3E3E3'
        },
        '& li:hover .MuiButtonBase-root': {
            //display: 'block',
            //color: '#000',
        },
        '& .MuiButtonBase-root': {
           // display: 'none'
        },
        '& .MuiButtonBase-root:hover': {
            //backgroundColor: 'transparent'
        }
    }
}))

export default function OldCal(props, initialFValues) {

    const { values, setValues, setOldListVisibility,recordForEdit } = props;
    let orderedFoodItems = values.orderDetails;

    const [foodItems, setFoodItems] = useState([]);
    const [searchList, setSearchList] = useState([]);
    const [searchKey, setSearchKey] = useState('');
    const classes = useStyles();

    useEffect(() => {

        createAPIEndpoint(ENDPIONTS.FOODITEM).fetchAll()
            .then(res => {
                setFoodItems(res.data);
                setSearchList(res.data);
            })
            .catch(err => console.log(err))


    }, [])


useEffect(() => {
        if (recordForEdit != null)
            setData({
                ...recordForEdit,
                
            })
    }, [recordForEdit])
    useEffect(() => {
        let x = [...foodItems];
        x = x.filter(y => {
            return y.foodName.toLowerCase().includes(searchKey.toLocaleLowerCase())
                && orderedFoodItems.every(item => item.foodItemId != y.foodItemId)
        });
        setSearchList(x);
    }, [searchKey, orderedFoodItems])
  

    const generateOrderNumber = () => Math.floor(100000 + Math.random() * 900000).toString();
    const addFoodItem = foodItem => {
        let x = {
            id: generateOrderNumber(), //values.id
            orderDetailId: 0,
            
            foodItemId: foodItem.id || generateOrderNumber(),
            quantitys: foodItem.quantitys,
            taxs: foodItem.taxs,
            foodItemPrices: foodItem.foodItemPrices ,  //data.prices
            foodItemNames: foodItem.foodItemNames ,
            discounts: foodItem.discounts ,  //data.fullname 
            subtotals:-(foodItem.foodItemPrices - foodItem.quantitys ) * b
        }
        setValues({
            ...values,
            orderDetails: [...values.orderDetails, x]
        })
        setOldListVisibility(false);
        resetInputField()
    }
 const addFoodItems = foodItem => {
        let x = {
            id: generateOrderNumber(), //values.id
            orderDetailId: 0,
            
            foodItemId: foodItem.id || generateOrderNumber(),
            quantitys: foodItem.quantitys,
            tax: foodItem.tax,
            foodItemPrices: foodItem.prices ,  //data.prices
            foodItemNames: foodItem.foodNames ,
            discounts: foodItem.discounts ,  //data.fullname 
            subtotals:-(foodItem.foodItemPrices - foodItem.quantitys ) * b
        }
        setValues({
            ...values,
            orderDetails: [...values.orderDetails, x]
        })
        setOldListVisibility(false);
        //resetInputField()
    }
 
    const resetInputField = () => {
        setData(initialFValues);

    };
    initialFValues = {
        id: '',
        foodItemId: '',
        quantitys:1,
        foodItemNames: '',
        foodItemPrices: '',
        taxs: 0,
        discounts:'',
        subtotals:0
    }
    const [foodItem, setData] = useState(initialFValues)
    function handle(e) {
        const newdata = { ...foodItem }
        newdata[e.target.id] = e.target.value
        setData(newdata)


        //console.log(newdata)
    }
 const handleInputChange = e => {
        const { name, value } = e.target
        setData({
            ...foodItem,
            [name]: value
        })
    }
    const handleChange = (e) => {
        e.preventDefault()
    }

const [countryState, setCountryState] = useState({
    loading: false,
    countries: [],
    errorMessage: "",
  });

  useEffect(() => {
    const fetchData = async () => {
      try {
        // fetch spinner
        setCountryState({
          ...countryState,
          loading: true,
        });

        //  fetch data
        const dataUrl = `https://serdb.onrender.com/api/FoodItem`;
        const response = await axios.get(dataUrl);
        setCountryState({
          ...countryState,
          countries: response.data,
          loading: false,
        });
      } catch (error) {
        setCountryState({
          ...countryState,
          loading: false,
          errorMessage: "Sorry Something went wrong",
        });
      }
    };

    fetchData();
  }, []);
  const { loading, errorMessage, countries } = countryState;
  console.log("loading", loading);
  console.log("countries", countries);
  console.log("errorMessage", errorMessage);

  const [selectedCountry, setSelectedCountry] = useState();
  console.log("selectedCountry", selectedCountry);

  //   find selected country data
  //search selected country
  const searchSelectedCountry = countries.find((obj) => {
    if (obj.foodName === selectedCountry) {
      return true;
    }
    return false;
  });
  console.log("searchSelectedCountry", searchSelectedCountry);
   
   const [display, setdisplay] = useState([]);

     useEffect(() => {
        createAPIEndpoint(ENDPIONTS.PRICE).fetchAll()
            .then(res => {
              
                setdisplay(res.data)
            })
            .catch(err => console.log(err))
    }, [])
const rates =   display.map(item => (item.rate))
  //foodItem.foodItemName = searchSelectedCountry && searchSelectedCountry.foodName

    //foodItem.foodItemPrice =searchSelectedCountry && searchSelectedCountry.price
foodItem.taxs = 'old'
foodItem.discounts = 1
 
const a = (foodItem.foodItemPrices - foodItem.quantitys )
const b = rates - 100
const total = -(a * b)
 

    return (
        <>

<Grid container spacing={2}>
    <Grid item xs={6}>
                 <Paper className={classes.searchPaper}>
                <InputBase
                    className={classes.searchInput}
                    value={searchKey}
                    onChange={e => setSearchKey(e.target.value)}
                    placeholder="Search Items" />
                <IconButton>
                    <SearchTwoToneIcon />
                </IconButton>
            </Paper>
            
            <List className={classes.listRoot}>
                {
                    searchList.map((item, idx) => (
                       <Card key={idx}    >
                          <CardHeader
        avatar={
          <Avatar sx={{ bgcolor: 'info' }} >
            {item.foodName.charAt(0)}
          </Avatar>
        }
        action= {'$' + item.prices * item.quantitys}
        title={item.foodName}
        subheader={item.prices}
      />
      
       <CardContent>
         <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>
  <Grid item xs={6}>
   <Typography variant="body2">
         {'FoodItemPrice : ' + item.prices}
       
      </Typography>
  </Grid>
  <Grid item xs={6}>
    <Typography variant="body2">
      {'FoodItemQuantity :' + item.quantitys}
      </Typography>
  </Grid>
   <Grid item xs={6}>
   <Typography variant="body2">
        {'FoodItemQuantity :' + item.quantitys}
       
      </Typography>
  </Grid>
  <Grid item xs={6}>
    <IconButton >
          <ShoppingCartOutlinedIcon onClick={(e )=> addFoodItems(item)} color="error"/>
        </IconButton>
  </Grid>
</Grid>
        
     </CardContent>
    
      
    </Card>
                          
                    ))
                }
            </List>
        
            </Grid>
            <Grid item xs={6}>
                <form onSubmit={handleChange} className={classes.root} noValidate autoComplete="off">
       <Grid container columns={{ xs: 4, md: 16 }}>

      
<Grid container  columns={16}>
  <Grid item xs={8}>
      <FormControl fullWidth>
        <InputLabel id="search-select-label">Select Item</InputLabel>
        <Select
         select={true}
          MenuProps={{
              anchorOrigin: {
                vertical: "bottom",
                horizontal: "left"
              },
              transformOrigin: {
                vertical: "bottom",
                horizontal: "left"
              },
              getContentAnchorEl: null
            }}
          labelId="search-select-label"
          id="search-select"
          value={selectedCountry}
                  onChange={(e) => setSelectedCountry(e.target.value)}
          label="Select Item"
         
          
        >
     
          <ListSubheader>
            <TextField
              size="small"
            
              autoFocus
              placeholder="Type to search..."
              fullWidth
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                )
              }}
              //onChange={(e) => setSearchText(e.target.value)}
              onKeyDown={(e) => {
                if (e.key !== "Escape") {
               
                  e.stopPropagation();
                }
              }}
            />
          </ListSubheader>
          {countries.map((item) => (
            <MenuItem key={item.id} value={item.foodName}>
              {item.foodName}
            </MenuItem>
          ))}
        </Select>
      </FormControl>
   <TextField focused label="ItemNames" name="foodItemNames" id="foodItemNames" value={foodItem.foodItemNames} onChange={handleInputChange} />
     <TextField focused inputProps={{ inputMode: 'numeric' }} label="Wastage" name="quantitys" id="quantitys" value={foodItem.quantitys} onChange={handleInputChange} />
     
   
  </Grid>
  <Grid item xs={8}>
     <Typography variant="h5" gutterBottom component="div">
       Rate : $ {rates - 100}
      </Typography>
      <Typography variant="h5" gutterBottom component="div">
       Grant Total : {total}
      </Typography>
      <Typography variant="h5" gutterBottom component="div">
       Discount : {foodItem.discount + "%"}
      </Typography>
                 <TextField focused inputProps={{ inputMode: 'numeric' }} label="Weight" name="foodItemPrices" id="foodItemPrices" value={foodItem.foodItemPrices} onChange={handleInputChange} />
  <TextField focused inputProps={{ inputMode: 'numeric' }} label="taxs" name="taxs" id="taxs" value={foodItem.taxs}  onChange={handleInputChange} />
     <TextField focused label="total" name="total" id="total" value={-total} onChange={handleInputChange} disabled/>
     
     <Grid container columnSpacing={{ xs: 1, sm: 2, md:3}}>
  <Grid item >
 <Button type="submit" variant="contained" size="small" onClick={e => addFoodItem(foodItem)} >Submit</Button>
  </Grid>
  <Grid item >
  <Button  variant="contained" size="small" onClick={ resetInputField} >Reset</Button>
  </Grid>
  
</Grid>
     
            
           
                 
              
  </Grid>
  
</Grid>
           
           </Grid>
           
            </form>
            
        
            </Grid>
        </Grid>
            

            
        </>
    )
}
 