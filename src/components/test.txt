import React, { useState, useEffect } from 'react'
import { createAPIEndpoint, ENDPIONTS } from "../../api";
import { Grid , List, ListItem, ListItemText, Paper, InputBase, IconButton, ListItemSecondaryAction,CardActionArea} from '@mui/material';
import InputLabel from '@mui/material/InputLabel';
import MenuItem from '@mui/material/MenuItem';
import CardHeader from '@mui/material/CardHeader';
import Select from '@mui/material/Select';
import FormControl from '@mui/material/FormControl';
import ShoppingCartOutlinedIcon from '@mui/icons-material/ShoppingCartOutlined';
import SearchTwoToneIcon from '@mui/icons-material/SearchTwoTone';
import PlusOneIcon from '@mui/icons-material/PlusOne';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import MoreVertIcon from '@mui/icons-material/MoreVert';
import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';
import Card from '@mui/material/Card';
import { red } from '@mui/material/colors';
import CardActions from '@mui/material/CardActions';
import CardContent from '@mui/material/CardContent';
import {
 Avatar,
  ListSubheader,
Box,

Typography,
  InputAdornment} from '@mui/material'
import SearchIcon from "@mui/icons-material/Search";
//import IconButton from '@mui/material/IconButton';
//import List from '@mui/material/List';
//import ListItem from '@mui/material/ListItem';
//import ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';
//import ListItemText from '@mui/material/ListItemText';
//import PlusOneIcon from '@mui/icons-material/PlusOne';
//import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';
//import CustomizedInputBase from '../../api/Search';
import { AdapterDateFns } from '@mui/lab/AdapterDateFns';
import { LocalizationProvider } from '@mui/lab';
//import { DatePicker } from '@mui/lab';
import axios from "axios";
import { makeStyles } from '@mui/styles';
import Button from '@mui/material/Button';
import TextField from '@mui/material/TextField';
import { useTheme } from '@mui/material/styles';


const useStyles = makeStyles(theme => ({
    root: {
        '& .MuiFormControl-root': {
            width: '90%',
            margin: useTheme().spacing(1)
        }
    },
    searchPaper: {
        padding: '2px 4px',
        display: 'flex',
        alignItems: 'center',
    },
    searchInput: {
        marginLeft: useTheme().spacing(1.5),
        flex: 1,
    },
    listRoot: {
        marginTop: useTheme().spacing(1),
        maxHeight: 450,
        overflow: 'auto',
        '& li:hover': {
            cursor: 'pointer',
            backgroundColor: '#E3E3E3'
        },
        '& li:hover .MuiButtonBase-root': {
            //display: 'block',
            //color: '#000',
        },
        '& .MuiButtonBase-root': {
           // display: 'none'
        },
        '& .MuiButtonBase-root:hover': {
            //backgroundColor: 'transparent'
        }
    }
}))

export default function OldCal(props, initialFValues) {

    const { values, setValues, setOldListVisibility,recordForEdit } = props;
    let oldorderedFoodItems = values.oldorderDetails;

    const [foodItems, setFoodItems] = useState([]);
    const [searchList, setSearchList] = useState([]);
    const [searchKey, setSearchKey] = useState('');
    const classes = useStyles();

    useEffect(() => {

        createAPIEndpoint(ENDPIONTS.FOODITEM).fetchAll()
            .then(res => {
                setFoodItems(res.data);
                setSearchList(res.data);
            })
            .catch(err => console.log(err))


    }, [])


useEffect(() => {
        if (recordForEdit != null)
            setData({
                ...recordForEdit,
                
            })
    }, [recordForEdit])
    useEffect(() => {
        let x = [...foodItems];
        x = x.filter(y => {
            return y.foodName.toLowerCase().includes(searchKey.toLocaleLowerCase())
                && oldorderedFoodItems.every(item => item.foodItemId != y.foodItemId)
        });
        setSearchList(x);
    }, [searchKey, oldorderedFoodItems])
  

    const generateOrderNumber = () => Math.floor(100000 + Math.random() * 900000).toString();
    const oldaddFoodItem = oldfoodItem => {
        let x = {
            id: generateOrderNumber(), //values.id
            orderDetailId: 0,
            
            foodItemId: oldfoodItem.id || generateOrderNumber(),
            quantitys: oldfoodItem.quantitys,
            taxs: oldfoodItem.taxs,
            foodItemPrices: oldfoodItem.foodItemPrices ,  //data.prices
            foodItemNames: oldfoodItem.foodItemNames ,
             rate:oldfoodItem.rate,
            discounts: oldfoodItem.discounts ,  //data.fullname 
            subtotals:(oldfoodItem.foodItemPrices - oldfoodItem.quantitys ) * oldfoodItem.rate
        }
        setValues({
            ...values,
            oldorderDetails: [...values.oldorderDetails, x]
        })
        setOldListVisibility(false);
        resetInputField()
    }
 const oldaddFoodItems = oldfoodItem => {
        let x = {
            id: generateOrderNumber(), //values.id
            orderDetailId: 0,
            
            foodItemId: oldfoodItem.id || generateOrderNumber(),
            quantitys: oldfoodItem.quantitys,
            tax: oldfoodItem.tax,
            foodItemPrices: oldfoodItem.prices ,  //data.prices
            foodItemNames: oldfoodItem.foodNames ,
            rate:oldfoodItem.rate,
            discounts: oldfoodItem.discounts ,  //data.fullname 
            subtotals:(oldfoodItem.foodItemPrices - oldfoodItem.quantitys ) * oldfoodItem.rate
        }
        setValues({
            ...values,
            oldorderDetails: [...values.oldorderDetails, x]
        })
        setOldListVisibility(false);
        //resetInputField()
    }
 
    const resetInputField = () => {
        setData(initialFValues);

    };
    initialFValues = {
        id: '',
        foodItemId: '',
        quantitys:1,
        foodItemNames: '',
        foodItemPrices: '',
        taxs: 0,
        rate:0,
        discounts:'',
        subtotals:0
    }
    const [oldfoodItem, setData] = useState(initialFValues)
    function handle(e) {
        const newdata = { ...oldfoodItem }
        newdata[e.target.id] = e.target.value
        setData(newdata)


        //console.log(newdata)
    }
 const handleInputChange = e => {
        const { name, value } = e.target
        setData({
            ...oldfoodItem,
            [name]: value
        })
    }
    const handleChange = (e) => {
        e.preventDefault()
    }

const [countryState, setCountryState] = useState({
    loading: false,
    countries: [],
    errorMessage: "",
  });

  useEffect(() => {
    const fetchData = async () => {
      try {
        // fetch spinner
        setCountryState({
          ...countryState,
          loading: true,
        });

        //  fetch data
        const dataUrl = `https://serdb.onrender.com/api/FoodItem`;
        const response = await axios.get(dataUrl);
        setCountryState({
          ...countryState,
          countries: response.data,
          loading: false,
        });
      } catch (error) {
        setCountryState({
          ...countryState,
          loading: false,
          errorMessage: "Sorry Something went wrong",
        });
      }
    };

    fetchData();
  }, []);
  const { loading, errorMessage, countries } = countryState;
  console.log("loading", loading);
  console.log("countries", countries);
  console.log("errorMessage", errorMessage);

  const [selectedCountry, setSelectedCountry] = useState();
  console.log("selectedCountry", selectedCountry);

  //   find selected country data
  //search selected country
  const searchSelectedCountry = countries.find((obj) => {
    if (obj.foodName === selectedCountry) {
      return true;
    }
    return false;
  });
  console.log("searchSelectedCountry", searchSelectedCountry);
   
   const [display, setdisplay] = useState([]);

     useEffect(() => {
        createAPIEndpoint(ENDPIONTS.PRICE).fetchAll()
            .then(res => {
              
                setdisplay(res.data)
            })
            .catch(err => console.log(err))
    }, [])
const rates =   display.map(item => (item.rate))
  //foodItem.foodItemName = searchSelectedCountry && searchSelectedCountry.foodName

    //foodItem.foodItemPrice =searchSelectedCountry && searchSelectedCountry.price
oldfoodItem.taxs = 'old'
oldfoodItem.discounts = 1
 
const a = (oldfoodItem.foodItemPrices - oldfoodItem.quantitys )
const b = rates - 100
const total = (a * oldfoodItem.rate)
 

    return (
        <>

<Grid container spacing={2}>
    <Grid item xs={6}>
                 <Paper className={classes.searchPaper}>
                <InputBase
                    className={classes.searchInput}
                    value={searchKey}
                    onChange={e => setSearchKey(e.target.value)}
                    placeholder="Search Items" />
                <IconButton>
                    <SearchTwoToneIcon />
                </IconButton>
            </Paper>
            
            <List className={classes.listRoot}>
                {
                    searchList.map((item, idx) => (
                       <Card key={idx}    >
                          <CardHeader
        avatar={
          <Avatar sx={{ bgcolor: 'info' }} >
            {item.foodName.charAt(0)}
          </Avatar>
        }
        action= {'$' + item.prices * item.quantitys}
        title={item.foodName}
        subheader={item.prices}
      />
      
       <CardContent>
         <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>
  <Grid item xs={6}>
   <Typography variant="body2">
         {'FoodItemPrice : ' + item.prices}
       
      </Typography>
  </Grid>
  <Grid item xs={6}>
    <Typography variant="body2">
      {'FoodItemQuantity :' + item.quantitys}
      </Typography>
  </Grid>
   <Grid item xs={6}>
   <Typography variant="body2">
        {'FoodItemQuantity :' + item.quantitys}
       
      </Typography>
  </Grid>
  <Grid item xs={6}>
    <IconButton >
          <ShoppingCartOutlinedIcon onClick={(e )=> oldaddFoodItems(item)} color="error"/>
        </IconButton>
  </Grid>
</Grid>
        
     </CardContent>
    
      
    </Card>
                          
                    ))
                }
            </List>
        
            </Grid>
            <Grid item xs={6}>
                <form onSubmit={handleChange} className={classes.root} noValidate autoComplete="off">
       <Grid container columns={{ xs: 4, md: 16 }}>

      
<Grid container  columns={16}>
  <Grid item xs={8}>
      <FormControl fullWidth>
        <InputLabel id="search-select-label">Select Item</InputLabel>
        <Select
         select={true}
          MenuProps={{
              anchorOrigin: {
                vertical: "bottom",
                horizontal: "left"
              },
              transformOrigin: {
                vertical: "bottom",
                horizontal: "left"
              },
              getContentAnchorEl: null
            }}
          labelId="search-select-label"
          id="search-select"
          value={selectedCountry}
                  onChange={(e) => setSelectedCountry(e.target.value)}
          label="Select Item"
         
          
        >
     
          <ListSubheader>
            <TextField
              size="small"
            
              autoFocus
              placeholder="Type to search..."
              fullWidth
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                )
              }}
              //onChange={(e) => setSearchText(e.target.value)}
              onKeyDown={(e) => {
                if (e.key !== "Escape") {
               
                  e.stopPropagation();
                }
              }}
            />
          </ListSubheader>
          {countries.map((item) => (
            <MenuItem key={item.id} value={item.foodName}>
              {item.foodName}
            </MenuItem>
          ))}
        </Select>
      </FormControl>
   <TextField focused label="ItemNames" name="foodItemNames" id="foodItemNames" value={oldfoodItem.foodItemNames} onChange={handleInputChange} />
     <TextField focused inputProps={{ inputMode: 'numeric' }} label="Wastage" name="quantitys" id="quantitys" value={oldfoodItem.quantitys} onChange={handleInputChange} />
       <TextField focused inputProps={{ inputMode: 'numeric' }} label="rate" name="rate" id="rate" value={oldfoodItem.rate} onChange={handleInputChange} />
   
  </Grid>
  <Grid item xs={8}>
     <Typography variant="h5" gutterBottom component="div">
       Rate : $ {oldfoodItem.rate}
      </Typography>
      <Typography variant="h5" gutterBottom component="div">
       Grant Total : {total}
      </Typography>
      <Typography variant="h5" gutterBottom component="div">
       Discount : {oldfoodItem.discount + "%"}
      </Typography>
                 <TextField focused inputProps={{ inputMode: 'numeric' }} label="Weight" name="foodItemPrices" id="foodItemPrices" value={oldfoodItem.foodItemPrices} onChange={handleInputChange} />
                 
  <TextField focused inputProps={{ inputMode: 'numeric' }} label="taxs" name="taxs" id="taxs" value={oldfoodItem.taxs}  onChange={handleInputChange} />
     <TextField focused label="total" name="total" id="total" value={-total} onChange={handleInputChange} disabled/>
     
     <Grid container columnSpacing={{ xs: 1, sm: 2, md:3}}>
  <Grid item >
 <Button type="submit" variant="contained" size="small" onClick={e => oldaddFoodItem(oldfoodItem)} >Submit</Button>
  </Grid>
  <Grid item >
  <Button  variant="contained" size="small" onClick={ resetInputField} >Reset</Button>
  </Grid>
  
</Grid>
     
            
           
                 
              
  </Grid>
  
</Grid>
           
           </Grid>
           
            </form>
            
        
            </Grid>
        </Grid>
            

            
        </>
    )
}
 